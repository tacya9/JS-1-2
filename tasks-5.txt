# Типы данных

-------------------
## 5.2 Числа

### 5.2.1
Встроенный метод Math.random() возвращает случайное число от 0 (включительно) до 1 (но не включая 1)
Напишите функцию random(min, max), которая генерирует случайное число с плавающей точкой от min до max (но не включая max).

### 5.2.2
Создайте функцию readNumber, которая будет запрашивать ввод числового значения до тех пор, пока посетитель его не введёт.
Функция должна возвращать числовое значение.
Также надо разрешить пользователю остановить процесс ввода, отправив пустую строку или нажав «Отмена». В этом случае
функция должна вернуть null.

-------------------
## 5.3 Строки

### 5.3.1
Напишите функцию ucFirst(str), возвращающую строку str с заглавным первым символом.

### 5.3.2
Создайте функцию truncate(str, maxlength), которая проверяет длину строки str и, если она превосходит maxlength,
заменяет конец str на "…", так, чтобы её длина стала равна maxlength.
Результатом функции должна быть та же строка, если усечение не требуется, либо, если необходимо, усечённая строка.
    truncate("Вот, что мне хотелось бы сказать на эту тему:", 20) ----> "Вот, что мне хотело…"
    truncate("Всем привет!", 20) ----> "Всем привет!"

### 5.3.3
Есть стоимость в виде строки "$120". То есть сначала идёт знак валюты, а затем – число.
Создайте функцию extractCurrencyValue(str), которая будет из такой строки выделять числовое значение и возвращать его.

### 5.3.4
Напишите функцию checkSpam(str), возвращающую true, если str содержит 'viagra' или 'XXX', а иначе false.
Функция должна быть нечувствительна к регистру:
    checkSpam('buy ViAgRA now') == true
    checkSpam('free xxxxx') == true
    checkSpam("innocent rabbit") == false

### 5.3.5
Создать объект со следующей логикой:
Запрашивает у пользователя любой текст: "Введите любой текст".
А потом с помощью алерта выводит информацию об этом тексте (учитывай перенос строк в алерте), например:
    Введенный текст: "Абра ка табра";
    Всего символов: 13;
    Всего слов: 3.

### 5.3.6
Создать объект со следующей логикой:
Запрашивает у пользователя любой текст: "Введите текст".
А потом выводит алерт с этим текстом, у которого в каждом слове первая буква - заглавная (большая).
(Без использования массива)

-------------------
## 5.4 Массивы

### 5.4.1
Давайте произведём 5 операций с массивом.
Создайте массив styles с элементами «Джаз» и «Блюз».
Добавьте «Рок-н-ролл» в конец.
Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой
длиной.
Удалите первый элемент массива и покажите его.
Вставьте «Рэп» и «Регги» в начало массива.
Массив по ходу выполнения операций:
    Джаз, Блюз
    Джаз, Блюз, Рок-н-ролл
    Джаз, Классика, Рок-н-ролл
    Классика, Рок-н-ролл
    Рэп, Регги, Классика, Рок-н-ролл

### 5.4.2
Напишите функцию sumInput(), которая:
Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт
«Отмена».
Подсчитывает и возвращает сумму элементов массива.
P.S. Ноль 0 – считается числом, не останавливайте ввод значений при вводе «0».

### 5.4.3
1) Сделать обьект, у которого будет свойство twoArray и метод create2Array. У метода будет два параметра:
количество айтемов в массиве и значение айтемов.
Метод создает двумерный массив и присваивает его свойству twoArray текущего обьекта.
Сделать с использованием метода push.
create2Array(3, 'hi') создаст:
    [
        ['hi', 'hi', 'hi'],
        ['hi', 'hi', 'hi'],
        ['hi', 'hi', 'hi']
    ]

2) К обьекту добавить свойство threeArray и метод create3Array.
У метода будет два параметра: количество айтемов в массиве и значение айтемов.
Метод создает трехмерный массив и присваивает его свойству threeArray текущего обьекта.
Сделать с использованием вложенных циклов.
create3Array(3, 'hi') создаст:
    [
        [
            ['hi', 'hi', 'hi'],
            ['hi', 'hi', 'hi'],
            ['hi', 'hi', 'hi']
        ],
        [
            ['hi', 'hi', 'hi'],
            ['hi', 'hi', 'hi'],
            ['hi', 'hi', 'hi']
        ],
        [
            ['hi', 'hi', 'hi'],
            ['hi', 'hi', 'hi'],
            ['hi', 'hi', 'hi']
        ]
    ]

### 5.4.4
Сделать объект, у которого будет 2 метода:
1) принимает значение и возвращает тру, если это число.
2) принимает массив и возвращает сумму всех айтемов.
Если в переданном массиве имеются нечисловые айтемы, тогда в расчете суммы их принимать за ноль.

### 5.4.5
Сделать объект с 3-мя методами:
1) принимает массив и возвращает инфу о каждом айтеме в таком виде (максимум 3 типа):
    The item 0 is number: 534,
    The item 1 is text: "hello",
    The item 2 is boolean: true.

Важно: описание каждого айтема должно быть в отдельной строке (мы это проверим с помощью alert) и в описании
последнего айтема в конце должна стоять точка.

2) принимает 2 значения (значение айтема и его номер в массиве) и возвращает текст в таком виде:
    The item 0 is a number: 534

3) принимает 1 значение (значение айтема) и вовзращает название типа: number, text или boolean.
И конечно же, 2 и 3 метод должен быть использован в 1 методе, чтобы получить необходимый результат.

-------------------
## 5.5 Методы массивов

### 5.5.1
Напишите функцию camelize(str), которая преобразует строки вида «my-short-string» в «myShortString».
То есть дефисы удаляются, а все слова после них получают заглавную букву.
Примеры:
    camelize("background-color") == 'backgroundColor';
    camelize("list-style-image") == 'listStyleImage';
    camelize("-webkit-transition") == 'WebkitTransition';

P.S. Подсказка: используйте split, чтобы разбить строку на массив символов, потом переделайте всё как нужно
и методом join соедините обратно.

### 5.5.2
Напишите функцию filterRange(arr, a, b), которая принимает массив arr, ищет в нём элементы между a и b и отдаёт массив этих элементов.
Функция должна возвращать новый массив и не изменять исходный.
    let arr = [5, 3, 8, 1];
    let filteredArray = filterRange(arr, 1, 4);

    alert( filteredArray ); // 3,1 (совпадающие значения)
    alert( arr ); // 5,3,8,1 (без изменений)

### 5.5.3
Напишите функцию filterRangeInPlace(arr, a, b), которая принимает массив arr и удаляет из него все значения
кроме тех, которые находятся между a и b. То есть, проверка имеет вид a ≤ arr[i] ≤ b.
Функция должна изменять принимаемый массив и ничего не возвращать.
    let arr = [5, 3, 8, 1];

    filterRangeInPlace(arr, 1, 4); // удалены числа вне диапазона 1..4

    alert( arr ); // [3, 1]

### 5.5.4
Сортировать в порядке по убыванию
    let arr = [5, 2, 1, -10, 8];

    alert( arr ); // 8, 5, 2, 1, -10

А еще отсортировать так: числа сортируются по убыванию, а булевое значение true должно стать в самом начале, а false - в
самом конце:
    [5, 2, 1, -10, 8, 12, true, false, true, false, 20, -3]
отсортируется так:
    [true, true, 20, 12, 8, 5, 2, 1, -3, -10, false, false]

### 5.5.5
У нас есть массив строк arr. Нужно получить отсортированную копию, но оставить arr неизменённым.
Создайте функцию copySorted(arr), которая будет возвращать такую копию.
    let arr = ["HTML", "JavaScript", "CSS"];
    let sorted = copySorted(arr);

    alert( sorted ); // CSS, HTML, JavaScript
    alert( arr ); // HTML, JavaScript, CSS (без изменений)

### 5.5.6
реализуйте функцию calculate(str), который принимает строку типа "1 + 2" в формате «ЧИСЛО оператор ЧИСЛО»
(разделено пробелами) и возвращает результат. Метод должен понимать плюс +, минус -, умножить *, разделить /.
Если оператор написали неизвестный, тогда функция должна вернуть сообщение об ошибке "The unknown operator: X"
Пример использования:
    alert( calculate("3 + 7") ); // 10

Числа и оператор разделены ровно одним пробелом.
Не лишним будет добавить обработку ошибок.

Когда все будет готово - подумай как сделать свою первоначальную идею - чтобы функции можно было передавать любое количество
чисел и операторов: 5 + 3 - 20 * 3 / 6

### 5.5.7
У вас есть массив объектов user, и в каждом из них есть user.name. Напишите код, который преобразует их в массив имён.

Например:
    let vasya = { name: "Вася", age: 25 };
    let petya = { name: "Петя", age: 30 };
    let masha = { name: "Маша", age: 28 };

    let users = [ vasya, petya, masha ];

    let names = /* ... ваш код */

    alert( names ); // Вася, Петя, Маша

### 5.5.8
Напишите функцию sortByAge(users), которая принимает массив объектов со свойством age и сортирует их по нему.

Например:
    let vasya = { name: "Вася", age: 25 };
    let petya = { name: "Петя", age: 30 };
    let masha = { name: "Маша", age: 28 };

    let arr = [ vasya, petya, masha ];

    sortByAge(arr);

    // теперь: [vasya, masha, petya]
    alert(arr[0].name); // Вася
    alert(arr[1].name); // Маша
    alert(arr[2].name); // Петя

### 5.5.9
Напишите функцию shuffle(array), которая перемешивает (переупорядочивает случайным образом) элементы массива.
Многократные прогоны через shuffle могут привести к разным последовательностям элементов. Например:
    let arr = [1, 2, 3];

    shuffle(arr);
    // arr = [3, 2, 1]

    shuffle(arr);
    // arr = [2, 1, 3]

    shuffle(arr);
    // arr = [3, 1, 2]
    // ...

Все последовательности элементов должны иметь одинаковую вероятность. Например, [1,2,3] может
быть переупорядочено как [1,2,3] или [1,3,2], или [3,1,2] и т.д., с равной вероятностью каждого случая.

### 5.5.10
Напишите функцию getAverageAge(users), которая принимает массив объектов со свойством age и возвращает средний возраст.
Формула вычисления среднего арифметического значения: (age1 + age2 + ... + ageN) / N.
Например:
    let vasya = { name: "Вася", age: 25 };
    let petya = { name: "Петя", age: 30 };
    let masha = { name: "Маша", age: 29 };

    let arr = [ vasya, petya, masha ];

    alert( getAverageAge(arr) ); // (25 + 30 + 29) / 3 = 28

### 5.5.11
создай объект с методом, которому мы передадим предложение (текст), а он вернет тоже предложение (текст),
в котором слова будут отсортированы по возрастанию. Например "ямочка в доме" превратится в "в доме ямочка".

Теперь добавь метод в этом объекте, который будет принимать слово и возвращать это слово с двумя заглавными
буквами: вначале и вконце. Потом воспользуйся этим методом - sortAscending будет возвращать текст, каждое слово
в котором будет иметь эти 2 заглавные буквы

сделай так, чтобы твой объект умел находиться числа в словах и удалять их. Например эта фраза "до34м в о8г9не"
должна превратиться в "В ДоМ ОгнЕ"

### 5.5.12
У вас есть массив объектов user, и у каждого из объектов есть name, surname и id.
Напишите код, который создаст ещё один массив объектов с параметрами id и fullName,
где fullName – состоит из name и surname.
Например:
    let vasya = { name: "Вася", surname: "Пупкин", id: 1 };
    let petya = { name: "Петя", surname: "Иванов", id: 2 };
    let masha = { name: "Маша", surname: "Петрова", id: 3 };

    let users = [ vasya, petya, masha ];

    let usersMapped = /* ... ваш код ... */

    /*
    usersMapped = [
        { fullName: "Вася Пупкин", id: 1 },
        { fullName: "Петя Иванов", id: 2 },
        { fullName: "Маша Петрова", id: 3 }
    ]
    */

    alert( usersMapped[0].id ) // 1
    alert( usersMapped[0].fullName ) // Вася Пупкин

### 5.5.13
Пусть arr – массив строк.
Напишите функцию unique(arr), которая возвращает массив, содержащий только уникальные элементы arr.
Например:
    function unique(arr) {
        /* ваш код */
    }

    let strings = ["кришна", "кришна", "харе", "харе", "харе", "харе", "кришна", "кришна", ":-O"];

    alert( unique(strings) ); // кришна, харе, :-O

### 5.5.14
Сделать объект с необходимыми методами. Главному методу будет передаваться массив с объектами, а он будет
возвращать новый массив с отсортированными по убыванию объектами. Сортировать по свойству year.
Добавь здесь еще один метод, который вернет строку имён разделенные запятыми, причем все латинские
буквы должны быть заменены на русские, например "Tania" должна стать "Таниа"
Массив с объектами:
    [
        {name: "Tania", year: 1985},
        {name: "Vlad", year: 1981},
        {name: "Danik", year: 2013},
        {name: "Artem", year: 2017}
    ]
должен отсортироваться в такой вид:
    [
        {name: "Artem", year: 2017},
        {name: "Danik", year: 2013},
        {name: "Tania", year: 1985},
        {name: "Vlad", year: 1981}
    ]

-------------------
## 5.11 Дата и время

### 5.11.1
Напишите функцию formatDate(date), которая выводит дату date в формате дд.мм.гг:
Например:
    const customDate = new Date(2014, 0, 30); // 30 января 2014
    alert( formatDate(customDate) ); // '30.01.14'

P.S. Обратите внимание, ведущие нули должны присутствовать, то есть 1 января 2001 должно быть 01.01.01, а не 1.1.1.

### 5.11.2
Сделать объект с необходимыми методами.
Главный метод этого объекта принимает число (количество секунд, которое прошло после 2000 года)
и возвращает строку даты в формате: "2002г. сентябрь 07"

### 5.11.3
Создать объект, главный метод которого принимает любую функцию, запускает ее и потом возвращает время выполнения
этой функции (количество милисекунд, за которое эта функция полностью выполнилась). Все вспомогательные переменные
сделать свойствами этого объекта.
Необходимо узнать сколько времени занимает выполнение этой функции:
    function fn() {
        for (let i = 0; i < 10000000; i++) {
            let random = Math.random();
        }
    }

В итоге должно получится примерно так:
    checkTime.init(fn); // 188

После выполнения этого задания, добавь в этот объект еще один метод, который будет принимать любое число
(количество секунд) и возвращать текст, который скажет сколько это секунд, минут, часов, дней, месяцев,
лет (нулевые значения не отображать), например:
4472 - это получится "1час. 14мин. 32сек."
