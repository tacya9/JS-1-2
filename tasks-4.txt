# Объекты: основы

-------------------
## 4.1 Объекты

### 4.1.1
Напишите код, выполнив задание из каждого пункта отдельной строкой:
Создайте пустой объект user.
Добавьте свойство name со значением John.
Добавьте свойство surname со значением Smith.
Измените значение свойства name на Pete.
Удалите свойство name из объекта.

### 4.1.2
Напишите функцию isEmpty(obj), которая возвращает true, если у объекта нет свойств, иначе false.
Должно работать так:

    let schedule = {};

    alert( isEmpty(schedule) ); // true

    schedule["8:30"] = "get up";

    alert( isEmpty(schedule) ); // false

### 4.1.3
У нас есть объект, в котором хранятся зарплаты нашей команды:

    let salaries = {
        John: 100,
        Ann: 160,
        Pete: 130
    }

Напишите код для суммирования всех зарплат и сохраните результат в переменной sum. Должно получиться 390.
Если объект salaries пуст, то результат должен быть 0.

### 4.1.4
Создайте функцию multiplyNumeric(obj), которая умножает все числовые свойства объекта obj на 2.
Например:
    // до вызова функции
    let menu = {
        width: 200,
        height: 300,
        title: "My menu"
    };

    multiplyNumeric(menu);

    // после вызова функции
    menu = {
        width: 400,
        height: 600,
        title: "My menu"
    };

Обратите внимание, что multiplyNumeric не нужно ничего возвращать. Следует напрямую изменять объект.
P.S. Используйте typeof для проверки, что значение свойства числовое.

### 4.1.5
создать функцию, которая принимает число и возвращает объект с двумя
свойствами: арифметическая и геометрическая прогрессия переданного числа

### 4.1.6
создать функцию, которая принимает 2 числа и находит сумму всех чисел из диапазона между первым и вторым переданным
числом. А потом возвращает объект с тремя свойствами: начальное число, конечное число, найденная сумма

### 4.1.7
Имеется глобальный объект с людьми разного возраста:
    {
        'Вася': 26,
        'Коля': 12,
        'Настя': 43,
        'Ира': 18,
        'Миша': 9,
    }

Создать первую функцию, которая принимает объект с людьми разного возраста и
возвращает объект с двумя свойствами: взрослые, дети. А в этих свойствах
в виде строки перечисленны имена людей через запятую, взрослые к взрослым, а дети к детям.
Причем, если в переданном объекте будет хотябы один раз не числовое значение, тогда
функция должна вернуть false.

Потом создать вторую функцию, которая будет выводить алерт с подобным текстом (сортировка имен не важна):
"Дети - Коля, Миша. Взрослые - Вася, Настя, Ира"
А если объект с именами оказался с ошибкой, тогда вывести алерт: "Ошибка в объекте с именами"

### 4.1.8
Создать функцию, которая будет возвращать обьект состоящий из свойств двух обьектов переданных этой функцией.
Но в новом объекте все названия свойств должны начинаться с "new-"
Если в функцию вместо обьекта передали что-то другое, то функция вернет оставшийся обьект.
А если в функцию передали не обьекты, тогда возвращает фолс.

### 4.1.9
Создай функцию, которая будет возвращать объект с таким количеством пустых свойств, которое мы будем ей передавать.
Все свойства должны быть названы и пронумерованы подобным образом: "prop-1", "prop-2" ...

### 4.1.10
Придумать глобальный объект, у которого будут несколько свойств со значениями разных типов - число, строка,
булевый,
объект. А у внутреннего объекта тоже будут несколько свойств со значениями разных типов - число, строка, булевый и
пустой объект. Потом необходимо вывести в консоль значения всех свойств внутреннего объекта по
отдельности (разными функциями console.log) без цикла.

### 4.1.11
Создай 2 переменные a и b с любыми числами. А потом создай объект, у которого будет 4 свойства. В каждом этом свойстве
будет находится результат сложения, вычитания, умножения, деления переменных a и b. Математические операции проделай
без какихто доп.переменных.
Создай функцию, которая будет показывать алерт с перечнем всех свойств и значений переданного объекта, подобным образом:
"{ a: 1, b: 2, c: 3, }"
Потом воспользуйся этой функцией чтобы показать твой глобальный объект.

### 4.1.12
Создай 2 объекта с одинаковыми названиями свойств. У каждого объекта будет по 4 свойства с разными числами.
Создай функцию, которая будет принимать 2 объекта и перемножать их. Перемножать их будет таким образом:
будет брать каждое свойство у одного и второго объекта, перемножать их значения и записывать их в
новый объект в свойство с таким же названием. И так перемножить все свойства. А полученный новый объект функция
будет возращать.
Создать функцию, которая будет обнулять объект и возращать его (все свойства ничего не содержат)

### 4.1.13
Создать функцию, которая принимает 2 значения: объект и любой тип данных. Она проверяет какой тип у
второго значения, добавляет в переданный объект новое свойство с соответствующим названием и присваивает ему
это значение.
Например, мы в эту функцию передали вторым значением true, тогда функцию вернут переданный объект
с новым свойством booleanValue: true.

-------------------
## 4.2 Копирование объектов и ссылки

### 4.2.1
Давай на практике проверим как копируются объекты.
Создай объект:
    let obj1 = {
        a: 'Привет',
        b: 123
    }

Потом объяви новый объект obj2 и присвой ему obj1.
Теперь в консоле выведи по отдельности 2 этих объекта.
Потом давай поменяем значения первому объекту соответствующим свойствам: 'Hello', 456.
И опять выведем в консоль по отдельности 2 этих объекта.
А потом скопируем первый объект в новый обьект по настоящему
Дальше поменяем значения первому объекту на первоначальные.
И выведем в консоль по отдельности 2 этих объекта(1ый и новый).
Последнее действие проделать еще с одним новым обьектом другим способом - через метод Object.assign.

Созвониться со мной и создать 5-ый объект с помощью оператора расширения "..." (spread оператор)

-------------------
## 4.4 Копирование объектов и ссылки

### 4.4.1
Создайте объект calculator (калькулятор) с тремя методами:

read() (читать) запрашивает два значения и сохраняет их как свойства объекта.
sum() (суммировать) возвращает сумму сохранённых значений.
mul() (умножить) перемножает сохранённые значения и возвращает результат.

### 4.4.2
У нас есть объект ladder (лестница), который позволяет подниматься и спускаться:
    let ladder = {
        step: 0,
        up() {
            this.step++;
        },
        down() {
            this.step--;
        },
        showStep: function() { // показывает текущую ступеньку
            alert( this.step );
        }
    };

Теперь, если нам нужно выполнить несколько последовательных вызовов, мы можем сделать это так:
    ladder.up();
    ladder.up();
    ladder.down();
    ladder.showStep(); // 1
    ladder.down();
    ladder.showStep(); // 0

Измените код методов up, down и showStep таким образом, чтобы их вызов можно было сделать по цепочке, например так:
    ladder.up().up().down().showStep().down().showStep(); // показывает 1 затем 0

Такой подход широко используется в библиотеках JavaScript.

### 4.4.3
Создать объект случайного числа. У него будет одно свойство, где будет сохраняться случайное целое число от -50 до 50. А
также 2 метода:
1) метод будет генерировать случайное число и записывать у себя в свойство обьекта.
2) метод будет показывать алерт с сообщением: "Случайное число: Х". Сгенерированное значение необходимо брать у свойства
своего же объекта.

### 4.4.4
Создать объект со следующей логикой:
Появляется вопрос: "Введите любое число".
Потом появляется алерт с сообщением: "Х - [четное; нечетное] число"

### 4.4.5
Создать объект со следующей логикой:
Появляется алерт с сообщением:
"Космос получил информацию о вас. Вы - человек [приятно; пузыристо; утончённо; извилисто]-
[глазастый, ушастый, волосастый, щекастый] [горбунёк, снусмумрик, супермэн, кракен]"
Значения из квадратных скобок выбираются случайно.

### 4.4.6
Создать объект со следующей логикой:
Появляется сообщение: "Введите любой текст (он будет накапливаться)"
Потом появляется конферм: "Накопленный текст: "[... ... ...]". Хотите еще добавить?"
Когда пользователь нажмет ОК - начинается всё сначала, появляется первое сообщение.
Если нажимает ОТМЕНА - всё заканчивается и выводится просто алерт: "Накопленный текст: "[... ... ...]""
Каждый новый добавленнный текст отделяется от предыдущего с помощью пробела.

### 4.4.7
Создать объект со следующей логикой:
Появляется вопрос: "Напишите число от 0 до 9 буквами"
А потом выводится алерт: "Вы указали число - Х" (Х - цифра)
Но если юзер написал неправильно, тогда должен выскочить алерт: "Такого числа не существует!"

### 4.4.8
Создать объект, который создаст внутри себя новый объект и будет его наполнять новыми пустыми свойствами со
следующей
логикой:
Появляется сообщение: "Введите название нового свойства"
Если юзер вводит название и нажимает ОК - добавляется новое свойство к внутреннему новому отдельному объекту и
потом снова появляется сообщение с предложением ввести название свойства.
Если нажимает ОТМЕНА - выводится только алерт с перечнем всех свойств (которые добавлял юзер) этого отдельного
внутреннего объекта, таким образом: "{ prop1, prop2, prop3, ...., }".

### 4.4.9
Создать объект с методом, который будет спрашивать у пользователя какое сообщение сохранить в объекте в отдельное
свойство: "Введите новое сообщение".
Если сообщение не ввели или нажали ОТМЕНА, тогда вместо этого сообщения должно быть "---".
Причем каждое новое сообщение добавляется к предыдущим под порядковым номером:
" 1) текст 2) сообщение 3) что-то еще".
И дальше в коде нам надо вызвать этот метод ровно 4 раза.
